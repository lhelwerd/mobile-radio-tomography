# Package imports
from ..reconstruction.Gaussian_Model import Gaussian_Model
from ..settings.Arguments import Arguments
from reconstruction_model import ModelTestCase

class TestReconstructionGaussianModel(ModelTestCase):
    def setUp(self):
        super(TestReconstructionGaussianModel, self).setUp()

        self.arguments = Arguments("settings.json", [])
        self.settings = self.arguments.get_settings("reconstruction_gaussian_model")

        self.model = Gaussian_Model(self.arguments)

    def test_initialization(self):
        # The sigma member variable must be set.
        self.assertEqual(self.model._sigma, self.settings.get("sigma"))

    def test_type(self):
        # The `type` property must be implemented and correct.
        self.assertEqual(self.model.type, "reconstruction_gaussian_model")

    def test_assign(self):
        length, source_distances, destination_distances = \
            super(TestReconstructionGaussianModel, self).test_assign()

        # The assigned weights must be generated by the Gaussian function.
        weights = self.model.assign(length, source_distances, destination_distances)

        summed_distances = source_distances + destination_distances
        expected = self.model._gaussian(summed_distances - length)

        self.assertTrue((weights == expected).all())

    def test_gaussian(self):
        self.model._sigma = 0.3

        # The Gaussian function must use alpha value 1 and mu value 0.
        self.assertEqual(self.model._gaussian(0), 1)

        # The Gaussian function must use the value for sigma. It must also be
        # symmetrical at mu value 0, so a negative value must yield the same
        # result as the corresponding positive value.
        self.assertAlmostEqual(self.model._gaussian(-0.3), 0.6, delta=0.01)
        self.assertAlmostEqual(self.model._gaussian(0.3), 0.6, delta=0.01)

        self.assertAlmostEqual(self.model._gaussian(-1), 0.004, delta=0.001)
        self.assertAlmostEqual(self.model._gaussian(1), 0.004, delta=0.001)
